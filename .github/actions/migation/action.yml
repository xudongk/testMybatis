name: migation

on:
  workflow_call:
    inputs:
      Env:
        required: true
        type: string
      DeployType:
        type: string
      DRIVER:
        type: string
        required: true
      PASSWORD:
        type: string
        required: true
      URL:
        type: string
        required: true
      USERNAME:
        type: string
        required: true
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: xudongk/testMybatis
    - id: setConfig
      name: Commit config file
      env:
        DRIVER: ${{ inputs.DRIVER }}
        PASSWORD: ${{ inputs.PASSWORD }}
        URL: ${{ inputs.URL }}
        USERNAME: ${{ inputs.USERNAME }}
      shell: bash
      run: |
        chmod +x mybatis-migrations-3.3.9/bin/migrate
        cd mybatis-migrations-3.3.9
        path=$(pwd)
        echo "path=$path" >> $GITHUB_OUTPUT
        export MIGRATIONS_HOME=$path
        export PATH="$MIGRATIONS_HOME/bin:$PATH"
        
        mkdir workspace
        cd workspace
        migrate --idpattern=0000 init
        cp -r $path/drivers/* drivers/
        rm -rf environments/*
        cp -r $path/environments/* environments/
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: sqlFile
    - name: set Sql
      shell: bash
      run: |
        rm -rf mybatis-migrations-3.3.9/workspace/scripts/*
        cp -r sqlFile/sql/* mybatis-migrations-3.3.9/workspace/scripts/
        cd mybatis-migrations-3.3.9/workspace/scripts
        ls
    - name: DB Deploy
      if: ${{ inputs.DeployType == 'DP' }}
      env:
        DRIVER: ${{ inputs.DRIVER }}
        PASSWORD: ${{ inputs.PASSWORD }}
        URL: ${{ inputs.URL }}
        USERNAME: ${{ inputs.USERNAME }}
      shell: bash
      run: |
        export MIGRATIONS_HOME=${{ steps.setConfig.outputs.path }}
        export PATH="$MIGRATIONS_HOME/bin:$PATH"
        cd mybatis-migrations-3.3.9/workspace/
        migrate status
        migrate up
      
    - name: DB Fallback
      if: ${{ failure() || inputs.DeployType == 'FB' }}
      env:
        DRIVER: ${{ inputs.DRIVER }}
        PASSWORD: ${{ inputs.PASSWORD }}
        URL: ${{ inputs.URL }}
        USERNAME: ${{ inputs.USERNAME }}
      shell: bash
      run: |
        export MIGRATIONS_HOME=${{ steps.setConfig.outputs.path }}
        export PATH="$MIGRATIONS_HOME/bin:$PATH"
        cd mybatis-migrations-3.3.9/workspace/
        #获取最小的id
        cd scripts
        # for file in *; do
        #     # 检查文件是否是普通文件
        #     if [[ -f "$file" ]]; then
        #         # 提取文件名中的数字部分
        #         number=$(echo "$file" | grep -o "^[0-9]*")
        #         # 检查是否为空
        #         if [[ -n "$number" ]]; then
        #             # 比较数字并更新最小值
        #             if [[ -z "$minid" || "$number" -lt "$minid" ]]; then
        #                 minid="$number"
        #             fi
        #         fi
        #     fi
        # done
        #读取ready_sql，获取待升级/回滚的sql
        file_content=$(cat ready_sql)
        IFS=',' read -ra sql_list <<< "$file_content"
        for number in "${sql_list[@]}"; do
          # 检查是否为空
          if [[ -n "$number" ]]; then
              # 比较数字并更新最小值
              if [[ -z "$minid" || "$number" -lt "$minid" ]]; then
                  minid="$number"
              fi
          fi
        done  
        
        minid=$(echo $minid | awk '{printf "%d", $0}')
        echo "$minid"
        cd ..
        #定义state
        #获取所有任务状态
        status=$(migrate status)
        lines=$(echo "$status" | awk '/^[0-9]+ [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} .+/ || /...pending... .+/ { print $0 }')
        echo lines:$lines
        #获取部署状态：
        while IFS= read -r line; do
            id=$(echo "$line" | awk '{print $1}')
            appliedAt=$(echo "$line" | awk '{print $2" "$3}')
            if [ "$minid" = "$id" ]; then
                echo minid:$minid
                if [[ $appliedAt == *pending* ]]; then
                    state="pending"
                    #不做操作
                else
                    state="success"
                    #version id并down
                    migrate version $id
                    migrate down
                fi
            fi
        done <<< "$lines"
        migrate status
