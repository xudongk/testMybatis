name: migation

on:
  workflow_call:
    inputs:
      Env:
        required: true
        type: string
      DeployType:
        type: string
      CMS_MYSQL_DRIVER:
        type: string
        required: true
      CMS_MYSQL_PASSWORD:
        type: string
        required: true
      CMS_MYSQL_URL:
        type: string
        required: true
      CMS_MYSQL_USERNAME:
        type: string
        required: true
runs:
  using: "composite"
  steps:
    - name: Commit config file
      if: hashFiles('mybatis-migrations-3.3.9/environments/development2.properties') != ''
      env:
        CMS_MYSQL_DRIVER: ${{ inputs.CMS_MYSQL_DRIVER }}
        CMS_MYSQL_PASSWORD: ${{ inputs.CMS_MYSQL_PASSWORD }}
        CMS_MYSQL_URL: ${{ inputs.CMS_MYSQL_URL }}
        CMS_MYSQL_USERNAME: ${{ inputs.CMS_MYSQL_USERNAME }}
      shell: bash
      run: |
        chmod +x mybatis-migrations-3.3.9/bin/migrate
        cd mybatis-migrations-3.3.9
        path=$(pwd)
        export MIGRATIONS_HOME=$path
        export PATH="$MIGRATIONS_HOME/bin:$PATH"
        
        mkdir workspace
        cd workspace
        migrate --idpattern=0000 init
        cp -r $path/drivers/* drivers/
        rm -rf environments/*
        cp -r $path/environments/* environments/
        git config --global user.email "xudongkej@163.com"
        git config --global user.name "xudongk"
        git add .
        git commit -m "init pack"
        git push
    - name: DB Deploy
      run: |
        migrate up
      if: ${{ inputs.DeployType == 'DP' }}
    - name: DB Fallback
      run: |
        #获取最小的id
        cd scripts
        for file in *; do
            # 检查文件是否是普通文件
            if [[ -f "$file" ]]; then
                # 提取文件名中的数字部分
                number=$(echo "$file" | grep -o "^[0-9]*")
                # 检查是否为空
                if [[ -n "$number" ]]; then
                    # 比较数字并更新最小值
                    if [[ -z "$minid" || "$number" -lt "$minid" ]]; then
                        minid="$number"
                    fi
                fi
            fi
        done
        cd ..
        #定义state
        #获取所有任务状态
        status=$(migrate status)
        lines=$(echo "$status" | sed -n '/^[0-9]\{14\}/p' | sed 's/^[[:space:]]*//')
        #获取部署状态：
        while IFS= read -r line; do
            id=$(echo "$line" | awk '{print $1}')
            appliedAt=$(echo "$line" | awk '{print $2" "$3}')
            if [ "$minid" = "$id" ]; then
                echo minid:$minid
                if [[ $appliedAt == *pending* ]]; then
                    state="pending"
                    #不做操作
                elif [[ $appliedAt == *fail* ]]; then
                    state="fail"
                    #down一次
                    migrate down
                else
                    state="success"
                    #version id并down
                    migrate version $id
                    migrate down
                fi
            fi
        done <<< "$lines"
        migrate status
      if: ${{ failure() || inputs.DeployType == 'FB' }}
        
